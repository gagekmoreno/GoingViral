## parameters ##
import ntpath 

# expects demultiplexed FASTQ
ONT_FASTQ = config['ont_fastq_gz']
ONT_BASENAME = ntpath.basename(ONT_FASTQ).replace('.clean.fastq.gz', '')

# reference databases
MAPPING_GENOME = config['mapping_genome']


## shell strings ##
# some of the same strings are used to run commands with different inputs and outputs
# save these strings here

# map reads to reference with minimap2
# input[0] is reference sequence
# input[1] is ONT reads
# output[0] is SAM file generated by minimap2 with all reads
MAP_READS_CMD = 'minimap2 \
-ax map-ont \
{input[0]} \
{input[1]} \
-t 32 \
-o {output[0]}'

FILTER_MAPPED_CMD = 'samtools \
view -h -F 0x900 \
{input[0]} \
> {output[0]}'

CONVERT_SAM_TO_BAM = 'samtools \
view -S -b \
{input[0]} \
> {output[0]}'

CALLVARIANTS = 'callvariants.sh \
in={input[0]} \
ref={input[1]} \
minallelefraction=0.10 \
rarity=0.10 \
calldel=f \
callindel=f \
out={output[0]}'


## rules
rule all:
    input:
        expand('mapped/{id}.vcf', id = ONT_BASENAME)
        
rule map_reads:
   input:
       MAPPING_GENOME,
       ONT_FASTQ
   output:
       'mapped/{id}.aln.sam'
   run:
       shell(MAP_READS_CMD)
       
rule filter_mapped_reads:
   input:
       'mapped/{id}.aln.sam'
   output:
       'mapped/{id}.primary.sam'
   run:
       shell(FILTER_MAPPED_CMD)

rule convert_sam_to_bam:
	input:
		'mapped/{id}.primary.sam'
	output:
		'mapped/{id}.primary.bam'
	run:
		shell(CONVERT_SAM_TO_BAM)

rule callvariants:
	input:
		'mapped/{id}.primary.bam',
		MAPPING_GENOME
	output:
		'mapped/{id}.vcf'
	run:
		shell(CALLVARIANTS)